// mapSaveManager.js

// Ruft den aktuellen MapState aus dem Speicher ab
function getMapState() {
    return JSON.parse(localStorage.getItem("mapState") || '{"revealedTiles": []}');
}

// Speichert den aktuellen MapState
function setMapState(state) {
    localStorage.setItem("mapState", JSON.stringify(state));
}

// Fügt ein Tile zum MapState hinzu (wird aufgedeckt)
function revealTileSave(row, col) {
    const key = `${row}-${col}`;
    const state = getMapState();
    if (!state.revealedTiles.includes(key)) {
        state.revealedTiles.push(key);
        setMapState(state);
    }
    revealTile(row, col); // Visuell freischalten
}

// Ruft beim Laden alle gespeicherten revealedTiles auf
function applyMapState() {
    const state = getMapState();
    if (state.revealedTiles) {
        state.revealedTiles.forEach(tileKey => {
            const [row, col] = tileKey.split("-").map(Number);
            revealTile(row, col);
        });
    }
}

// Exportfunktion: zeigt den aktuellen Speicherstand als JSON an
function saveExport() {
    const state = getMapState();
    const saveData = JSON.stringify(state);
    prompt("Speicherstand (kopieren):", saveData);
}

// Importfunktion: lädt einen Speicherstand
function saveImport() {
    const saveData = prompt("Speicherstand einfügen:");
    if (saveData) {
        try {
            const state = JSON.parse(saveData);
            setMapState(state);
            location.reload();
        } catch (e) {
            alert("Ungültiges Savegame.");
        }
    }
}

// Resetfunktion: löscht den Speicherstand
function resetMap() {
    if (confirm("Wirklich zurücksetzen?")) {
        localStorage.removeItem("mapState");
        location.reload();
    }
}
